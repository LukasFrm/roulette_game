{"version":3,"sources":["components/GameBoard.js","components/Roulette.js","components/LogBox.js","components/EventBox.js","App.js","index.js"],"names":["GameBoard","props","useState","gameLayout","setGameLayout","layout","colorMap","gameResult","blinkButton","res","idx","setTimeout","useEffect","arr","i","length","key","data-id","type","className","style","animation","id","map","item","height","Roulette","rouletteRes","setRouletteRes","count","setCount","stats","arr1","arr2","Object","values","push","result","Fragment","colSpan","index","hitColor","LogBox","logs","EventBox","timer","events","App","setColorMap","setLayout","setStats","nextGame","setNextGame","setLogs","setTimer","loading","setLoading","setEvents","API_link","setAPI_link","setGameResult","intervalRef","useRef","appendLog","prop","prev","Date","toISOString","getConfiguration","a","fetch","configResponse","json","configData","colors","results","positionToId","resObj","forEach","getStats","statsResponse","statsData","clearInterval","current","spinTheWheel","gameResultResponse","gameResultData","loadTheBoard","getNextGame","nextGameResponse","nextGameData","fakeStartDelta","setInterval","htmlFor","value","onChange","e","target","Spinner","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d75553ef.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\n\r\nfunction GameBoard(props) {\r\n  const [gameLayout, setGameLayout] = useState([])\r\n  const { layout, colorMap, gameResult } = props\r\n\r\n  const blinkButton = (res, idx) => {\r\n    if (res === idx) {\r\n      return 'blink_me'\r\n    }\r\n\r\n    if (res === idx) {\r\n      setTimeout(() => {\r\n        return \"\"\r\n      }, 4000)\r\n    }\r\n  }\r\n    /* eslint-disable */\r\n  useEffect(() => {\r\n    let arr = []\r\n    for (let i = 0; i < layout.length; i++) {\r\n      arr = [\r\n        ...arr,\r\n        <button\r\n          key={i}\r\n          data-id={`slot-${layout[i]}`}\r\n          type=\"button\"\r\n          className={`col-1 btn btn-${colorMap[layout[i]]} ${blinkButton(\r\n            gameResult,\r\n            layout[i],\r\n          )}`}\r\n          style={{animation: gameResult === layout[i] && \"blinker 1s linear 5\"}}\r\n        >\r\n          {layout[i]}\r\n        </button>,\r\n      ]\r\n    }\r\n    setGameLayout(arr)\r\n  }, [layout])\r\n      /* eslint-enable */\r\n\r\n  return (\r\n    <>\r\n      <h4>Game board</h4>\r\n      <div className=\"row\">\r\n        <div className=\"col-10 \">\r\n          <div id=\"game_board\" className=\"row\">\r\n            {gameLayout.map(item => {\r\n              return item\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <div id=\"spinner\" style={{ height: '100px' }}></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GameBoard\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nfunction Roulette(props) {\r\n  const [rouletteRes, setRouletteRes] = useState([])\r\n  const [count, setCount] = useState([])\r\n  const { stats, colorMap, gameResult } = props\r\n\r\n  useEffect(() => {\r\n    let arr1 = []\r\n    let arr2 = []\r\n    Object.values(stats).map(item => {\r\n      arr1.push(item.result)\r\n      arr2.push(item.count)\r\n      return null\r\n    })\r\n    setRouletteRes(arr1)\r\n    setCount(arr2)\r\n  }, [stats])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h4>Stats (last 200)</h4>\r\n      <table id=\"stats\" className=\"table\">\r\n        <tbody>\r\n          <tr>\r\n            <td>&nbsp;</td>\r\n            <th colSpan=\"5\" className=\"cold\">\r\n              Cold\r\n            </th>\r\n            <th colSpan=\"27\" className=\"neutral\">\r\n              Neutral\r\n            </th>\r\n            <th colSpan=\"5\" className=\"hot\">\r\n              Hot\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>Slot</th>\r\n            {rouletteRes.map((item, index) => {\r\n              return (\r\n                <td\r\n                  key={index}\r\n                  className={`btn-${colorMap[item]}`}\r\n                  style={{\r\n                    animation: gameResult === item && 'blinker 1s linear 5',\r\n                  }}\r\n                >\r\n                  {item}\r\n                </td>\r\n              )\r\n            })}\r\n          </tr>\r\n          <tr>\r\n            <th>Hits</th>\r\n            {count.map((item, index) => {\r\n              let hitColor = 'neutral'\r\n              if (index < 5) hitColor = 'cold'\r\n              if (index > 31) hitColor = 'hot'\r\n\r\n              return (\r\n                <td className={`${hitColor}`} key={index}>\r\n                  {item}\r\n                </td>\r\n              )\r\n            })}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Roulette\r\n","import React from 'react'\r\n\r\nfunction LogBox(props) {\r\n  const { logs } = props\r\n  return (\r\n    <React.Fragment>\r\n      <h4>Log</h4>\r\n      <pre id=\"log_box\">\r\n        {logs.map(item => {\r\n          return item \r\n        })}\r\n      </pre>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default LogBox\r\n","import React from 'react'\r\n\r\nfunction EventBox(props) {\r\n  const { id, timer, events } = props\r\n  return (\r\n    <React.Fragment>\r\n      <h4>Events</h4>\r\n      <ul id=\"event_box\" className=\"list-group\">\r\n        <li className=\"list-group-item\">\r\n          Game {id} will start in {timer} sec\r\n        </li>\r\n        {events.map((item, index) => {\r\n          return <li key={index} className=\"list-group-item\">{item}</li>\r\n        })}\r\n      </ul>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default EventBox\r\n","import React, { useState, useEffect, useRef } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Spinner from 'react-bootstrap/Spinner'\nimport GameBoard from './components/GameBoard'\nimport Roulette from './components/Roulette'\nimport LogBox from './components/LogBox'\nimport EventBox from './components/EventBox'\n\nfunction App() {\n  const [colorMap, setColorMap] = useState([])\n  const [layout, setLayout] = useState([])\n  const [stats, setStats] = useState({})\n  const [nextGame, setNextGame] = useState([])\n  const [logs, setLogs] = useState([])\n  const [timer, setTimer] = useState(1)\n  const [loading, setLoading] = useState(false)\n  const [events, setEvents] = useState([])\n  const [API_link, setAPI_link] = useState(\n    'https://dev-games-backend.advbet.com/v1/ab-roulette/1/',\n  )\n  const [gameResult, setGameResult] = useState('')\n  const intervalRef = useRef(null)\n\n  const appendLog = prop => {\n    setLogs(prev => [\n      ...prev,\n      <span>{new Date().toISOString() + ' ' + prop}</span>,\n    ])\n  }\n\n  const getConfiguration = async () => {\n    appendLog('Loading game board')\n    appendLog('GET .../configuration')\n\n    const configResponse = await fetch(`${API_link}/configuration`)\n    const configData = await configResponse.json()\n    const { colors, results, positionToId } = configData\n    let resObj = {}\n    results.forEach((key, i) => (resObj[key] = colors[i]))\n    setColorMap(resObj)\n    setLayout(positionToId)\n  }\n\n  const getStats = async () => {\n    const statsResponse = await fetch(`${API_link}/stats?limit=200`)\n    const statsData = await statsResponse.json()\n    setStats(statsData)\n    appendLog('GET .../stats?limit=200')\n  }\n\n  const runTimer = x => {\n    intervalRef.current = setInterval(() => {\n      setTimer(prev => prev - 1)\n    }, 1000)\n  }\n  /* eslint-disable */\n\n  useEffect(() => {\n    if (!timer) {\n      clearInterval(intervalRef.current)\n      intervalRef.current = null\n      spinTheWheel()\n    }\n  }, [timer])\n\n  const spinTheWheel = async () => {\n    appendLog('Spinning the wheel')\n    if (loading === false) {\n      appendLog(`GET .../game/1416587`)\n      const gameResultResponse = await fetch(`${API_link}/game/${nextGame.id}`)\n      const gameResultData = await gameResultResponse.json()\n      setGameResult(gameResultData.result)\n      setLoading(true)\n    } else appendLog('Wheel is already spinning')\n  }\n  useEffect(() => {\n    if (gameResult === null) {\n      appendLog('Still no result, continue spinning')\n      setTimeout(() => {\n        spinTheWheel()\n      }, 2000)\n    }\n    if (typeof gameResult === 'number') {\n      appendLog(`Result is ${gameResult}`)\n      setLoading(false)\n      appendLog('Stopping the wheel')\n      setEvents(prev => [\n        ...prev,\n        `Game ${nextGame.id} ended, result is ${gameResult}`,\n      ])\n      loadTheBoard()\n    }\n  }, [gameResult])\n\n\n  const getNextGame = async () => {\n    const nextGameResponse = await fetch(`${API_link}/nextGame`)\n    const nextGameData = await nextGameResponse.json()\n    setNextGame(nextGameData)\n    const { fakeStartDelta } = nextGameData\n    appendLog('Checking for new game')\n    appendLog('GET .../nextGame')\n    appendLog(`sleeping for fakeStartDelta ${fakeStartDelta} sec`)\n    setTimer(fakeStartDelta)\n    runTimer()\n  }\n\n  const loadTheBoard = () => {\n    getStats()\n    getConfiguration()\n    getNextGame()\n  }\n\n  // First roulette load\n  useEffect(() => {\n    loadTheBoard()\n  }, [])\n\n  return (\n    <React.Fragment>\n      <div className=\"p-5 m-5\">\n        <h1>Roulette Game</h1>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"api_base\">API base URL</label>\n            <input\n              className=\"form-control\"\n              id=\"api_base\"\n              value={API_link}\n              onChange={e => setAPI_link(e.target.value)}\n            />\n          </div>\n        </form>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <Roulette\n              stats={stats}\n              colorMap={colorMap}\n              gameResult={gameResult}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <GameBoard\n              colorMap={colorMap}\n              layout={layout}\n              gameResult={gameResult}\n            />\n            <EventBox id={nextGame.id} timer={timer} events={events} />\n          </div>\n          <div className=\"col-1\">\n            {loading === true && <Spinner animation=\"border\" role=\"status\" />}\n          </div>\n          <div className=\"col-6\">\n            <LogBox logs={logs} />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}